//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Relay.Http;



namespace Unity.Services.Relay.Models
{
    /// <summary>
    /// The endpoint connection details of a Relay server.
    /// </summary>
    [Preserve]
    [DataContract(Name = "RelayServerEndpoint")]
    public class RelayServerEndpoint
    {
        /// <summary>
        /// The endpoint connection details of a Relay server.
        /// </summary>
        /// <param name="connectionType">Canonical connection type: - udp: Use for plain UDP connections. - dtls: Use for secured UDP connections. See [DTLS encryption](https://docs.unity.com/relay/dtls-encryption.html) to learn more.</param>
        /// <param name="network">The IP network (only for use with UDP).</param>
        /// <param name="reliable">A boolean value indicating whether the delivery of the data is guaranteed.</param>
        /// <param name="secure">A boolean value indicating whether the endpoint is secured.</param>
        /// <param name="host">The host name or IP address of the Relay server.</param>
        /// <param name="port">The port number of the Relay server.</param>
        [Preserve]
        public RelayServerEndpoint(string connectionType, NetworkOptions network, bool reliable, bool secure, string host, int port)
        {
            ConnectionType = connectionType;
            Network = network;
            Reliable = reliable;
            Secure = secure;
            Host = host;
            Port = port;
        }

        /// <summary>
        /// Canonical connection type: - udp: Use for plain UDP connections. - dtls: Use for secured UDP connections. See [DTLS encryption](https://docs.unity.com/relay/dtls-encryption.html) to learn more.
        /// </summary>
        [Preserve]
        [DataMember(Name = "connectionType", IsRequired = true, EmitDefaultValue = true)]
        public string ConnectionType{ get; }
        /// <summary>
        /// The IP network (only for use with UDP).
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "network", IsRequired = true, EmitDefaultValue = true)]
        public NetworkOptions Network{ get; }
        /// <summary>
        /// A boolean value indicating whether the delivery of the data is guaranteed.
        /// </summary>
        [Preserve]
        [DataMember(Name = "reliable", IsRequired = true, EmitDefaultValue = true)]
        public bool Reliable{ get; }
        /// <summary>
        /// A boolean value indicating whether the endpoint is secured.
        /// </summary>
        [Preserve]
        [DataMember(Name = "secure", IsRequired = true, EmitDefaultValue = true)]
        public bool Secure{ get; }
        /// <summary>
        /// The host name or IP address of the Relay server.
        /// </summary>
        [Preserve]
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host{ get; }
        /// <summary>
        /// The port number of the Relay server.
        /// </summary>
        [Preserve]
        [DataMember(Name = "port", IsRequired = true, EmitDefaultValue = true)]
        public int Port{ get; }
    

        /// <summary>
        /// The IP network (only for use with UDP).
        /// </summary>
        /// <value>The IP network (only for use with UDP).</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NetworkOptions
        {
            /// <summary>
            /// Enum Udp for value: udp
            /// </summary>
            [EnumMember(Value = "udp")]
            Udp = 1,

            /// <summary>
            /// Enum Tcp for value: tcp
            /// </summary>
            [EnumMember(Value = "tcp")]
            Tcp = 2

        }

    }
}

